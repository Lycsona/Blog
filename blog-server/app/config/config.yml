imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

parameters:
    locale: en

framework:
    secret: '%secret%'
    session:
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    translator: { fallbacks: ["%locale%"] }

twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.project_dir%/var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    auth_mode: "%mailer_auth_mode%"
    port:      "%mailer_port%"

nelmio_api_doc:
    sandbox:
        request_format:
            method: accept_header

nelmio_cors:
        defaults:
            allow_credentials: false
            allow_origin: []
            allow_headers: []
            allow_methods: []
            expose_headers: []
            max_age: 0
            hosts: []
            origin_regex: false
        paths:
            '^/api':
                allow_origin: ['*']
                allow_headers: ['*']
                allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'OPTIONS']
                max_age: 3600

old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     'guest'
            password: 'guest'
            vhost:    '/'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 3

            # requires php-amqplib v2.4.1+ and PHP5.4+
            keepalive: false

            # requires php-amqplib v2.4.1+
            heartbeat: 0

            #requires php_sockets.dll
            use_socket: false # default false
        another:
            # A different (unused) connection defined by an URL. One can omit all parts,
            # except the scheme (amqp:). If both segment in the URL and a key value (see above)
            # are given the value from the URL takes precedence.
            # See https://www.rabbitmq.com/uri-spec.html on how to encode values.
            url: 'amqp://guest:password@localhost:5672/vhost?lazy=1&connection_timeout=6'
    producers:
        page-views:
            connection:       default
            exchange_options: {name: 'page-views', type: direct}
            service_alias:    my_app_service # no alias by default
        incorrect-login:
            connection:       default
            exchange_options: {name: 'incorrect-login', type: direct}
            service_alias:    my_app_service
    consumers:
        page-views:
            connection:       default
            exchange_options: {name: 'page-views', type: direct}
            queue_options:    {name: 'page-views'}
            callback:         page_views_consumer
            enable_logger: true
        incorrect-login:
            connection:       default
            exchange_options: {name: 'incorrect-login', type: direct}
            queue_options:    {name: 'incorrect-login'}
            callback:         incorrect_login_consumer
            enable_logger: true

fos_rest:
  param_fetcher_listener: true
  body_listener: true
  routing_loader:
    include_format: false
  format_listener:
    enabled: true
  view:
    view_response_listener: 'force'
    formats:
      json: true
    templating_formats:
        json: true
    force_redirects:
      html: true
    failed_validation: HTTP_BAD_REQUEST
    default_engine: twig
  serializer:
    serialize_null: true

fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: api
    user_class: App\BlogBundle\Entity\User
    from_email:
        address: "%mailer_address%"
        sender_name: "%mailer_user%"

doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations
    organize_migrations: false # Version >= 1.2, possible values are: "BY_YEAR", "BY_YEAR_AND_MONTH", false
    custom_template: ~ # Version >= 1.2, path to your custom migrations template

lexik_jwt_authentication:
    private_key_path: '%jwt_private_key_path%'
    public_key_path:  '%jwt_public_key_path%'
    pass_phrase:      '%jwt_key_pass_phrase%'
    token_ttl:        '%jwt_token_ttl%'
    encoder:
        # token encoder/decoder service - default implementation based on the namshi/jose library
        service: lexik_jwt_authentication.encoder.default
        # crypto engine used by the encoder service
        crypto_engine: openssl
        # encryption algorithm used by the encoder service
        signature_algorithm: RS256
    token_extractors:
        authorization_header:      # look for a token as Authorization Header
            enabled: true
            prefix:  Bearer
            name:    Authorization
        cookie:                    # check token in a cookie
            enabled: false
            name:    BEARER
        query_parameter:           # check token in query string parameter
            enabled: false
            name:    bearer